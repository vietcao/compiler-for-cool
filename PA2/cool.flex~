/*
 *  The scanner definition for COOL.
 */

/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
%{
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
extern char* yytext;

int count;
int process_string(char* _yytext);
int comment();
int process_string_new();
char result[MAX_STR_CONST];
%}

/*
 * Define names for regular expressions here.
 */

DARROW          =>
OBJECTINDENTIFIER	[a-z][a-zA-Z0-9_]*
TYPEINDENTIFIER		[A-Z][a-zA-Z0-9]*
DIGIT		[0-9]+
%%

 /*
  *  Nested comments
  */


 /*
  *  The multiple-character operators.
  */
{DARROW}			{ return (DARROW); }
(C|c)(L|l)(A|a)(S|s)(S|s)	{ return (CLASS);  }
(E|e)(L|l)(S|s)(E|e)		{ return (ELSE);   }
(F|f)(I|i)			{ return (FI);	   }
(I|i)(F|f)			{ return (IF);	   }
(I|i)(N|n)			{ return (IN);	   }
(I|i)(N|n)(H|h)(E|e)(R|r)(I|i)(T|t)(S|s) { return (INHERITS);}
(L|l)(E|e)(T|t)			{ return (LET);	}
(L|l)(O|o)(O|o)(P|p)		{ return (LOOP);}
(P|p)(0|o)(O|o)(L|l)		{ return (POOL);}
(T|t)(H|h)(E|e)(N|n)		{ return (THEN);}
(W|w)(H|h)(I|i)(L|l)(E|e)	{ return (WHILE);}
(C|c)(A|a)(S|s)(E|e)		{ return (CASE);}
(E|e)(S|s)(A|a)(C|c)		{ return (ESAC);}
(O|o)(F|f)			{ return (OF);}
(N|n)(E|e)(W|w)			{ return (NEW);}
(I|i)(S|s)(V|v)(O|o)(I|i)(D|d)	{ return (ISVOID);}
(N|n)(O|o)(T|t)			{ return (NOT);}
"<="				{ return (LE);}
t(R|r)(U|u)(E|e)		{ cool_yylval.boolean = 1; return (BOOL_CONST); }
f(A|a)(L|l)(S|s)(E|e)	{ cool_yylval.boolean = 0; return (BOOL_CONST);	}
SELF_TYPE		{ cool_yylval.symbol = idtable.add_string(yytext);
			  	 return (TYPEID);
			}



\(\*			{
			  count = 1; 
			  if( comment() == 0 ){
			      cool_yylval.error_msg = "EOF end of comment";
			      return (ERROR);
			  }
			}
\*\)			{ cool_yylval.error_msg = "Unmatched *)"; return (ERROR); }
--.*			{ }

\"			{  
			    if( process_string_new() ==1 ){
    			    	cool_yylval.symbol = stringtable.add_string(yytext);
				return (STR_CONST);
   			      }else{
		  	        cool_yylval.error_msg = yytext;
				return (ERROR);
  			    } 
			}
\"(\\.|[^\\"\n]|\\\n)*\n { 
			  cool_yylval.error_msg = "unterminated strings constants";
		          curr_lineno++;
			  return (ERROR);
		         }
{DIGIT}			{ cool_yylval.symbol = inttable.add_string(yytext);
			  return (INT_CONST);
			}

{OBJECTINDENTIFIER}	{ cool_yylval.symbol = idtable.add_string(yytext);
			  return (OBJECTID);
			}
{TYPEINDENTIFIER}	{ cool_yylval.symbol = idtable.add_string(yytext);
			   return (TYPEID);
			}
"<-"			{ return (ASSIGN);}



"+"			{ return '+';}
"/"			{ return '/';}
"-"			{ return '-';}
"*"			{ return '*';}
"="			{ return '=';}
"<"			{ return '<';}
"."			{ return '.';}
"~"			{ return '~';}
","			{ return ',';}
";"			{ return ';';}
":"			{ return ':';}
"("			{ return '(';}
")"			{ return ')';}
"@"			{ return '@';}
"{"			{ return '{';}
"}"			{ return '}';}
[ \n\f\r\t\v]		{ if( *yytext == '\n') curr_lineno++; }
. 			{
			 // char* s = yytext ; s++; s =//printf("%c", s);
			  cool_yylval.error_msg = yytext;
			  return (ERROR); 
			}

 /*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */


 /*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */


%%

int yywrap(void){
	return 1;
}


int comment(){
   char s;
   s = yyinput();
   while(1 == 1){	
	if( s == '('){
		s = yyinput(); 
		if( s == '*') count++;
		else continue;
	}
	if( s == '*'){
		s = yyinput(); 
		if( s == ')') count--;
		else continue;
	}
	if( s == '\n'){
		curr_lineno++;
	}
	if( count == 0) break;
	if( s == '\0' ) return 0;
	s = yyinput(); 
   }

   return 1;	
}


int process_string_new(){
    
    char s;
    int error = 0;
    s = yyinput(); 
    int i = 0;
    while( s != '\"'){
    	   if( (int)s == -1 ){
	       yytext = "eof occur in string constant"; 
	       return 0; 
	   }
    	   if(i == MAX_STR_CONST -1){
	   	yytext = "string constant too long";
		error =1;
	   }
	   if( s  == '\0'){
	       yytext = "String contains null character";
	       error = 1;
	   }
           if( s == '\\'){
                s = yyinput();
		switch( s ){
			case 'n' : result[i] = '\n'; break;
			case 'b' : result[i] = '\b'; break;
			case 't' : result[i] = '\t'; break;
			case 'f' : result[i] = '\f'; break;
			case '\0': yytext = "String contants null character"; error=1 ; break; 
			default  : result[i] = s;
		}
		
           }else{
		 if( s  != '\n') { result[i] = s; }
		 else{	curr_lineno++;
			yytext = "string contains invalid character";
			error = 1;
		}
           }
	   s = yyinput();     
           i++; 
    }
    if( error == 1) return 0;
    result[i] = '\0';
    yytext = result;
    return 1;
}